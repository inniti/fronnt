"""
Status of a product
"""
enum ProductStatus {
  DRAFT
  PUBLISHED
  DISCONTINUED
}

"""
Status of an article
"""
enum ArticleStatus {
  DRAFT
  PUBLISHED
  DISCONTINUED
}

"""
Type of a media object
"""
enum MediaType {
  IMAGE
  VIDEO
}

"""
Purpose of a Media object
"""
enum MediaPurpose {
  COVER
}

"""
Type of a suggestion entry
"""
enum SuggestionType {
  PRODUCT
  ARTICLE
  BRAND
  COLLECTION
}

enum SortValue {
  ASC
  DESC
}

enum AttributeType {
  NUMBER
  COLOR
  TEXT
  BOOLEAN
}

enum FilterType {
  NUMBER
  COLOR
  TEXT
  BOOLEAN
}

enum PageStatus {
  DRAFT
  PUBLISHED
}

enum ContentBlockStatus {
  DRAFT
  PUBLISHED
}

enum ReservationStatus {
  NEW
  READY
  CLOSED
  CANCELLED
}

enum RelatedProductType {
  ACCESSORY
  ALTERNATIVE
  SUCCESSOR
}

enum ShipmentStatus {
  PENDING
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  PENDING
  COMPLETE
}

enum OrderStatus {
  NEW
  SHIPPED
  CLOSED
  CANCELED
}

enum SearchResultItemType {
  PRODUCT
  COLLECTION
  PAGE
  BRAND
}

enum ProductOptionType {
  TEXT
  COLOR
}

interface PagedResult {
  paging: Paging!
}

####################################################################################
# Scalars
####################################################################################

"""
A map of scalars
"""
scalar ScalarMap

####################################################################################
# Types
####################################################################################

"""
A map of features supported by the project
"""
type Features {
  core: Boolean!
  reservations: Boolean!
  warehouses: Boolean!
  openingTimes: Boolean!
  sellers: Boolean!
}

"""
General purpose error object
"""
type Error {
  code: String!
  message: String
  ref: String
}

"""
Locale
"""
type Locale {
  isoCode: String!
  label: String
}

"""
Shop specific settings and configuration
"""
type Shop {
  pricePrecision: Int!
  currencies: [Currency!]!
  locales: [Locale!]!
  defaultLocale: Locale
}

"""
Paging information
"""
type Paging {
  total: Int!
}

"""
A media object
"""
type Media {
  mediaType: MediaType!
  url: String!
  purpose: MediaPurpose
}

"""
Meta data for SEO
"""
type Meta {
  description: String!
  title: String!
  robots: String
}

"""
Opening times of a warehouse/store
"""
union OpeningTime = RegularOpeningTime | DeviatingOpeningTime

"""
Regular (recurring) opening times of a warehouse/store
"""
type RegularOpeningTime {
  dayOfWeek: String!
  from: String!
  until: String!
}

"""
Opening hours can deviate from regular times in order to be able to reflect public holidays, for example.
"""
type DeviatingOpeningTime {
  date: String!
  from: String
  until: String
  closed: Boolean!
}

"""
A warehouse
"""
type Warehouse {
  id: ID!
  name: String!
  openingTimes: [OpeningTime!]!
}

"""
Tells how many items of an article are available. Refers to the BaseUnit of the article.
"""
type Availability {
  value: Int!
  warehouseId: ID!
  warehouse: Warehouse
}

"""
Users can apply coupons to a cart
"""
type Coupon {
  key: String!
  label: String
  value: Int!
}

"""
Discounts can be applied by the system to either CartItems or the Cart as a whole
"""
type Discount {
  id: ID!
  label: String
  value: Int!
}

"""
An actual tax value, referring to a TaxClass
"""
type TaxValue {
  value: Int!
  taxClass: TaxClass!
}

"""
Expenses are additional costs that will be charged to the customer
"""
type Expense {
  id: ID!
  label: String!
  value: Int!
}

"""
Total amounts of a Cart or a CartItem
"""
type Totals {
  net: Int!
  gross: Int!
  taxes: [TaxValue!]!
  discounts: [Discount!]!
  expenses: [Expense!]!
}

"""
An instance of a shopping cart
"""
type Cart {
  id: ID!
  createdAt: String
  updatedAt: String
  items: [CartItem!]!
  coupons: [Coupon!]!
  totals: Totals!
  """
  List of available shipping methods for this cart
  """
  shippingMethods: [ShippingMethod!]!
  """
  List of available payment methods for this cart
  """
  paymentMethods: [PaymentMethod!]!
}

"""
Cart item extensions
"""
type CartItemExtensions {
  positionText: String
}

"""
A cart line item
"""
type CartItem {
  id: ID!
  cartId: ID!
  createdAt: String
  updatedAt: String
  sku: String!
  article: Article
  parentItemId: ID
  parent: CartItem
  quantity: Int!
  salesUnit: SalesUnit!
  children: [CartItem!]!
  totals: Totals!
  extensions: CartItemExtensions
}

"""
Result of a carts query
"""
type CartsResult implements PagedResult {
  paging: Paging!
  results: [Cart!]!
}

interface SellableInfo {
  description: String
}

"""
Product information
"""
type ProductInfo implements SellableInfo {
  description: String!
}

"""
Value of a product option
"""
type ProductOptionValue {
  value: String!
  label: String
}

"""
Product options make up variants. Each article must have all product options of the product defined as attributes.
The value of an attribute matches the value of a ProductOptionValue
"""
type ProductOption {
  id: ID!
  label: String!
  type: ProductOptionType!
  values: [ProductOptionValue!]!
}

"""
The product catalog consists of products. Products are made up of one or many articles. Products by their own are not buyable.
"""
type Product {
  id: ID!
  title: String!
  skus: [String!]!
  collectionIds: [ID!]!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  info: ProductInfo!
  brandId: ID!
  options: [ProductOption!]!
  brand: Brand
  labels: [String!]!
  attributes: [Attribute]!
  createdAt: String
  updatedAt: String
  slug: String!
  status: ProductStatus!
  articles(filters: [FilterInput!]): [Article!]
  collections: [Collection!]
  relatedProducts(
    type: RelatedProductType
    paging: PagingInput
  ): RelatedProductsResult
  manufacturerId: ID
  manufacturer: Manufacturer
}

"""
Sellers sell articles. In most cases there is only one vendor in the system, but there may be many for marketplaces
"""
type Seller {
  id: ID!
  name: String!
}

"""
Manufacturers build products. In most cases there is only one vendor in the system, but there may be many for marketplaces
"""
type Manufacturer {
  id: ID!
  name: String!
}

"""
Result of a manufacturers query
"""
type ManufacturersResult implements PagedResult {
  paging: Paging!
  results: [Manufacturer!]!
}

"""
Result of a sellers query
"""
type SellersResult implements PagedResult {
  paging: Paging!
  results: [Seller!]!
}

"""
A product which related to an other product
"""
type RelatedProduct {
  type: RelatedProductType!
  product: Product!
}

"""
Definition of a product attribute
"""
type AttributeDefinition {
  id: ID!
  label: String
  attributeType: AttributeType!
}

"""
A concrete product attribute (value)
"""
type Attribute {
  definition: AttributeDefinition!
  value: String!
}

"""
Article information
"""
type ArticleInfo implements SellableInfo {
  description: String
}

"""
An article is a concrete shape of a product
"""
type Article {
  id: ID!
  sku: String!
  title: String!
  productId: ID!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  info: ArticleInfo!
  brandId: ID!
  brand: Brand
  isBuyable: Boolean!
  isMaster: Boolean!
  labels: [String!]!
  attributes: [Attribute!]!
  prices(quantity: Int): [Price!]!
  taxClass: TaxClass!
  availabilities(warehouseId: ID): [Availability!]!
  status: ArticleStatus!
  product: Product
  salesUnits: [SalesUnit!]!
  baseUnit: BaseUnit!
  sellers(filters: [FilterInput!], sort: [SortInput!]): [Seller!]
}

"""
Value of a (maybe) applied filter
"""
type FilterValue {
  label: String!
  id: ID!
  count: Int!
}

"""
Generic filter returned from lists/search
"""
type AppliedFilter {
  id: ID!
  label: String
  type: FilterType!
  values: [FilterValue!]!
}

"""
Collections are hierarchical containers for products
"""
type Collection {
  id: ID!
  title: String!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  description: String
  childrenIds: [String]!
  parentId: ID
  slug: String!
  products(
    query: String
    filters: [FilterInput!]
    sort: [SortInput!]
    paging: PagingInput
  ): ProductsResult
  parent: Collection
  children: [Collection!]
}

"""
Brand
"""
type Brand {
  id: ID!
  title: String!
  logo: String!
  slug: String!
  collectionIds: [String!]!
  collections: [Collection!]
  products(
    query: String
    filters: [FilterInput!]
    sort: [SortInput!]
    paging: PagingInput
  ): ProductsResult
}

union SuggestionResult = Product | Article | Brand | Collection

"""
Search Suggestion
"""
type Suggestion {
  type: SuggestionType!
  title: String!
  slug: String
  resultId: ID!
  result: SuggestionResult
}

union SearchResultItemReference = Product | Collection | Brand | Page

"""
A search result entry for product searches
"""
type SearchResultItem {
  type: SearchResultItemType!
  referenceId: ID
  reference: SearchResultItemReference
  title: String!
  url: String
  image: String
}

"""
Paged search result
"""
type SearchResult implements PagedResult {
  paging: Paging!
  results: [SearchResultItem!]!
  filters: [AppliedFilter!]!
}

"""
Paged result of a product list
"""
type ProductsResult implements PagedResult {
  paging: Paging!
  results: [Product!]!
}

"""
Paged result of a related-product list
"""
type RelatedProductsResult implements PagedResult {
  paging: Paging!
  results: [RelatedProduct!]!
}

"""
Paged result of a collection list
"""
type CollectionsResult implements PagedResult {
  paging: Paging!
  results: [Collection!]!
}

"""
Paged result of a brand list
"""
type BrandsResult implements PagedResult {
  paging: Paging!
  results: [Brand!]!
}

"""
Checkout state
"""
type CheckoutState {
  id: ID!
  email: String
  paymentMethod: PaymentMethod
  shippingMethod: ShippingMethod
  shippingAddress: Address
  billingAddress: Address
}

interface AddressFields {
  name: String!
  street: String!
  street2: String
  company: String
  zipCode: String!
  city: String!
  province: String
  country: String!
  phone: String
}

"""
An address in general
"""
type Address implements AddressFields {
  name: String!
  street: String!
  street2: String
  company: String
  zipCode: String!
  city: String!
  province: String
  country: String!
  phone: String
}

"""
A saved address of a customer
"""
type CustomerAddress implements AddressFields {
  id: ID!
  name: String!
  street: String!
  street2: String
  company: String
  zipCode: String!
  city: String!
  province: String
  country: String!
  phone: String
  isDefaultBillingAddress: Boolean!
  isDefaultShippingAddress: Boolean!
}

"""
Shipping Method
"""
type ShippingMethod {
  id: ID!
  label: String
  expense: Expense
  description: String
}

"""
Payment Method
"""
type PaymentMethod {
  id: ID!
  label: String
  expense: Expense
  description: String
}

"""
Payment
"""
type Payment {
  status: PaymentStatus!
}

"""
Container for payment information of an order
"""
type OrderPaymentInfo {
  method: PaymentMethod!
  payments: [Payment!]!
}

"""
A Shipment Item describes which articles have been shipped in which quantity
"""
type ShipmentItem {
  id: ID!
  quantity: Int!
  article: Article
}

"""
Shipment
"""
type Shipment {
  status: ShipmentStatus!
  items: [ShipmentItem!]!
  trackingNumber: String
  carrier: String
}

"""
Container for shipping information
"""
type OrderShippingInfo {
  method: ShippingMethod!
  shipments: [Shipment!]!
}

"""
Order
"""
type Order {
  id: ID!
  createdAt: String!
  status: OrderStatus!
  items: [OrderItem!]
  billingAddress: Address!
  shippingAddress: Address!
  paymentInfo: OrderPaymentInfo!
  shippingInfo: OrderShippingInfo!
}

"""
Order item
"""
type OrderItem {
  id: ID!
  sku: String!
  title: String!
  quantity: Int!
  price: Int!
  orderId: ID!
  article: Article
}

"""
Paged result of an order list
"""
type OrdersResult implements PagedResult {
  paging: Paging!
  results: [Order!]
}

"""
Currency
"""
type Currency {
  name: String!
  symbol: String!
}

"""
Country
"""
type Country {
  "ISO 3166-1 code"
  isoCode: String!
  name: String!
}

"""
Tax class
"""
type TaxClass {
  id: ID!
  name: String!
  "Fractional value in percent applied to the net amount, e.g. 19.0"
  value: Float!
  country: Country!
}

"""
A sales unit is the unit in which an article is sold. Every article has to have at least SalesUnit, usually "piece"
"""
type SalesUnit {
  id: ID!
  name: String!
  "Factor which defines how to convert its BaseUnit to this SalesUnit"
  conversion: Int!
  minQuantity: Int
  maxQuantity: Int
  standardQuantity: Int
  interval: Int
}

"""
The base unit is used for price calculations and stock management
"""
type BaseUnit {
  id: ID!
  name: String!
}

"""
A reference price provides a baseline with which prices of different articles can be compared, even though these
articles might be sond in different SalesUnits.
"""
type ReferencePrice {
  quantity: Int!
  netValue: Int!
  grossValue: Int!
  salesUnit: SalesUnit!
  taxValue: TaxValue!
  currency: Currency!
}

"""
Prices (and their related quantities) always refer to the BaseUnit of an article
"""
type Price {
  currency: Currency!
  quantity: Int!
  netValue: Int!
  grossValue: Int!
  taxValue: TaxValue!
  validFrom: String
  validUntil: String
  original: Int
  """
  In percent
  """
  discount: Int
  referencePrice: ReferencePrice
}

"""
Wishlist
"""
type Wishlist {
  id: ID!
  items: [WishlistItem!]!
}

"""
Wishlist item
"""
type WishlistItem {
  id: ID!
  sku: String!
  article: Article
  quantity: Int!
}

"""
Paged result of a wishlist list
"""
type WishlistsResult implements PagedResult {
  paging: Paging!
  results: [Wishlist!]
}

"""
Saved Customer
"""
type Customer {
  id: ID!
  customerNumber: String!
  firstname: String
  lastname: String
  blocked: Boolean!
  email: String!
  addresses: [CustomerAddress!]!
}

"""
Result of adding one or many articles to the cart
"""
type AddToCartResult {
  errors: [Error!]!
  cart: Cart
}

union PageReference = Product | Article | Brand | Collection

"""
A page represents a page in the storefront, typically provided by a CMS
"""
type Page {
  id: ID!
  title: String!
  meta: Meta!
  url: String!
  status: PageStatus!
  blocks: [ContentBlock!]!
  locale: String
  createdAt: String
  updatedAt: String
  childrenIds: [ID!]!
  children: [Page!]
  template: String
  referenceId: ID
  reference: PageReference
}

"""
A page can have multiple blocks, each of a specific type, which are optionally placed into slots
"""
type ContentBlock {
  id: ID!
  """
  The content block key should be an alternative but still stable and unique key, with which a loose block (not attached to a Page) can be queried
  """
  key: String
  blockType: String!
  data: ScalarMap!
  status: ContentBlockStatus!
  slot: String
  locale: String
  createdAt: String
  updatedAt: String
  """
  Page blocks have a specific order within a page. The order field can be null if the page block is global (i.e. not associated with a page)
  """
  order: Int
}

"""
A Menu is a list of links which can be placed at not predefined places in the storefront
"""
type Menu {
  id: ID!
  place: String
  items: [MenuItem!]!
}

"""
Links are the pendant to HTML anchors and are used in MenuItems
"""
type Link {
  href: String!
  label: String!
  target: String
  rel: String
}

"""
A Menuitem represents a Link and are hierarchically structured (may have child MenuItems)
"""
type MenuItem {
  label: String!
  link: Link
  children: [MenuItem!]!
}

"""
A reservation of articles in specified quantites in a warehouse
"""
type Reservation {
  id: ID!
  reservationNumber: String!
  status: ReservationStatus!
  customerId: ID
  customer: Customer
  email: String!
  phone: String
  firstname: String!
  lastname: String!
  warehouseId: ID!
  warehouse: Warehouse
  validUntil: String!
  articles: [ReservedArticle!]!
}

"""
A reserved article references an article in a specified quantity which is part of a reservation
"""
type ReservedArticle {
  id: ID!
  sku: String!
  article: Article
  quantity: Int!
}

"""
Result of a reservations query
"""
type ReservationsResult implements PagedResult {
  paging: Paging!
  results: [Reservation!]!
}

"""
Result of a warehouses query
"""
type WarehousesResult implements PagedResult {
  paging: Paging!
  results: [Warehouse!]!
}

"""
RegistrationResult
"""
type RegistrationResult {
  customer: Customer
}

"""
Session
"""
type Session {
  id: String!
}

####################################################################################
# Inputs
####################################################################################

"""
Sort specifier
"""
input SortInput {
  field: String!
  value: SortValue!
}

"""
Paging specifier
"""
input PagingInput {
  limit: Int!
  page: Int!
}

"""
Cart item extensions data
"""
input CartItemExtensionsInput {
  positionText: String
  customization: ScalarMap
}

"""
Update cart item data
"""
input UpdateCartItemInput {
  quantity: Int
  salesUnitId: ID
  extensions: CartItemExtensionsInput
}

"""
One item to be added to the cart
"""
input AddToCartItemInput {
  sku: String!
  quantity: Int!
  salesUnitId: ID!
  parentCartItemId: ID
  extensions: CartItemExtensionsInput
}

"""
Generic filter input for lists/search
"""
input FilterInput {
  id: ID!
  values: [String!]!
}

"""
Order list filters
"""
input OrdersFilterInput {
  from: String
  until: String
  status: [OrderStatus!]
}

"""
Address data
"""
input AddressInput {
  name: String!
  street: String!
  street2: String
  company: String
  zipCode: String!
  city: String!
  province: String
  country: String!
  phone: String
}

"""
Checkout data to be updated
"""
input UpdateCheckoutInput {
  email: String
  shippingMethod: ID
  paymentMethod: ID
  billingAddress: AddressInput
  shippingAddress: AddressInput
}

"""
Customer data for registration
"""
input RegistrationInput {
  email: String!
  firstname: String
  lastname: String
  password: String
  company: String
  addresses: [AddressInput!]!
  salutation: String
}

"""
Customer data to be updated
"""
input UpdateCustomerInput {
  email: String
  firstname: String
  lastname: String
}

"""
Contact data required to create a reservation
"""
input ReservationContactDataInput {
  email: String!
  firstname: String!
  lastname: String!
  phone: String
}

"""
Data required to create a new reservation
"""
input ReservationInput {
  sku: String!
  quantity: Int!
  contactData: ReservationContactDataInput!
}

"""
Fields to narrow down search results for warehouses around a location
"""
input AroundLocationInput {
  searchQuery: String
  longitude: Float
  latitude: Float
  radius: Int
}

####################################################################################
# Root
####################################################################################

type Query {
  features: Features!

  shop: Shop

  search(
    query: String
    filters: [FilterInput!]
    sort: [SortInput!]
    paging: PagingInput
  ): SearchResult

  suggestions(searchTerm: String!): [Suggestion!]!

  product(id: ID!): Product
  productByField(field: String!, value: String!): Product

  article(id: ID!): Article
  articleByField(field: String!, value: String!): Article

  brands(paging: PagingInput): BrandsResult
  brand(id: ID!): Brand
  brandByField(field: String!, value: String!): Brand

  collections(paging: PagingInput): CollectionsResult
  collection(id: ID!): Collection
  collectionByField(field: String!, value: String!): Collection

  carts(paging: PagingInput): CartsResult
  cart(id: ID!): Cart

  wishlists(sort: [SortInput!]): WishlistsResult
  wishlist(id: ID!): Wishlist

  orders(
    paging: PagingInput
    sort: [SortInput!]
    filters: [OrdersFilterInput!]
  ): OrdersResult
  order(id: ID!): Order

  customer: Customer

  page(id: ID!): Page
  pageByField(field: String!, value: String!): Page
  looseContentBlocks(type: String, status: ContentBlockStatus): [ContentBlock!]!
  contentBlock(id: ID, key: String): ContentBlock

  menu(id: ID!): Menu
  menusByPlace(place: String!): [Menu!]!

  warehouses(aroundLocation: AroundLocationInput): WarehousesResult
  warehouse(id: ID!): Warehouse
  warehouseByField(field: String!, value: String!): Warehouse

  reservations: ReservationsResult
  reservation(id: ID!): Reservation
  reservationByField(field: String!, value: String!): Reservation

  manufacturers: ManufacturersResult
  manufacturer(id: ID!): Manufacturer
  manufacturerByField(field: String!, value: String!): Manufacturer

  sellers(
    filters: [FilterInput!]
    sort: [SortInput!]
    paging: PagingInput
  ): SellersResult
  seller(id: ID!): Seller
  sellerByField(field: String!, value: String!): Seller

  session: Session
}

type Mutation {
  createCart: Cart
  deleteCart(id: ID!): Boolean
  addToCart(cartId: ID!, items: [AddToCartItemInput!]!): AddToCartResult
  updateCartItem(id: ID!, data: UpdateCartItemInput): CartItem
  removeFromCart(cartItemId: ID!): Boolean
  applyCoupon(cartId: ID!, coupon: String!): Cart

  createWishlist: Wishlist
  deleteWishlist: Boolean
  addToWishlist(wishlistId: ID!): Wishlist
  removeFromWishlist(wishlistItemId: ID!): Boolean

  startCheckout(cartId: ID!, data: UpdateCheckoutInput!): CheckoutState
  updateCheckout(cartId: ID!, data: UpdateCheckoutInput!): CheckoutState
  finishCheckout(cartId: ID!): Order

  register(data: RegistrationInput!): RegistrationResult
  updateCustomer(id: ID!, data: UpdateCustomerInput!): Customer
  addCustomerAddress(data: AddressInput!): CustomerAddress
  updateCustomerAddress(
    data: AddressInput
    setDefaultBilling: Boolean
    setDefaultShipping: Boolean
  ): CustomerAddress
  deleteCustomerAddress(id: ID!): Boolean

  createReservation(
    sku: String!
    quantity: Int!
    reservationData: ReservationInput!
  ): Reservation
  cancelReservation(reservationId: ID!): Boolean

  startSession: Session
}
