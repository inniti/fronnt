"""
Status of a product
"""
enum ProductStatus {
  DRAFT
  PUBLISHED
  DISCONTINUED
}

"""
Status of an article
"""
enum ArticleStatus {
  DRAFT
  PUBLISHED
  DISCONTINUED
}

"""
Type of a media object
"""
enum MediaType {
  IMAGE
  VIDEO
}

"""
Purpose of a Media object
"""
enum MediaPurpose {
  COVER
}

"""
Type of a suggestion entry
"""
enum SuggestionType {
  PRODUCT
  ARTICLE
  BRAND
  CATEGORY
}

enum SortValue {
  ASC
  DESC
}

enum ResolveUrlResultType {
  CATEGORY
  PRODUCT
  ARTICLE
  BRAND
}

enum AttributeType {
  NUMBER
  COLOR
  TEXT
  BOOLEAN
}

enum PageStatus {
  DRAFT
  PUBLISHED
}

enum PageBlockStatus {
  DRAFT
  PUBLISHED
}

enum ReservationStatus {
  NEW
  READY
  CLOSED
  CANCELLED
}

enum RelatedProductType {
  ACCESSORY
  ALTERNATIVE
  SUCCESSOR
}

enum ArticleOptionType {
  NUMBER
  TEXT
  CHECKBOX
  SELECT
  DATE
}

enum ArticleOptionConstraintOperator {
  EQUALS
  GREATER_THAN
  LESS_THAN
  INCLUDES
}

enum MeasurementType {
  METRIC
  IMPERIAL_UK
  IMPERIAL_US
}

"""
Usable charsets according to https://www.iana.org/assignments/character-sets/character-sets.xhtml using _ instead of -
"""
enum CharsetType {
  UTF_8
  UTF_16
}

enum TrackingType {
  URL
  CODE
}

enum PriceType {
  GROSS
  NET
}

enum MeasurementUnitType {
  ITEM # Item
  KILO # Kilo
  GRAM # Gram
  TONE # Ton
  GBOU # GB Ounce
  USOU # US Ounce
  PUND # Pound
  HUWG # Hundredweight
  GBTN # GB Ton
  USTN # US Ton
  OZTR # Troy Ounce
  UCWT # US Hundredweight
  METR # Meter
  CMET # Centimeter
  MMET # Millimetre
  KMET # Kilometre
  INCH # Inch
  YARD # Yard
  FOOT # Foot
  MILE # Mile
  SMET # Square Metre
  SQKI # Square Kilometre
  SMIL # Square Millimetre
  SCMT # Square Centimetre
  SQIN # Square Inch
  SQFO # Square Foot
  SQMI # Square Mile
  SQYA # Square Yard
  ACRE # Acre
  ARES # Are
  HECT # Hectare
  LITR # Litre
  CELI # Centilitre
  MILI # Milli Litre
  GBGA # GB Gallon
  GBPI # GB Pint
  USPI # US Pint
  GBQA # GB Quart
  USQA # US Quart
  USGA # US Gallon
  BARL # Barrel
  BCUF # Billion Cubic Feet
  BDFT # Board Feet
  CBME # Cubic Meter
  MIBA # Million Barrel
  DGEU # Diesel Gallon Equivalent
  GGEU # Gasoline Gallon Equivalent
  BUSL # Bushel
}

interface PagedResult {
  paging: Paging!
}

####################################################################################
# Scalars
####################################################################################

"""
A map of scalars
"""
scalar ScalarMap

####################################################################################
# Types
####################################################################################

"""
General purpose error object
"""
type Error {
  code: String!
  message: String
  ref: String
}

"""
Shop specific settings and configuration
"""
type Shop {
  currencies: [Currency!]!
  locales: [Locale!]!
  """
  PriceType enum should be used
  """
  priceTypes: [String!]!
  defaults: ShopDefaults!
  """
  For analytics/tracking purposes, e.g.: web
  """
  channel: String
}

"""
Default settings and configurations for a specific shop
"""
type ShopDefaults {
  currency: Currency!
  locale: Locale!
  priceType: PriceType!
  pricePrecision: Int!
}

"""
Locale configurations
"""
type Locale {
  isoCode: String! #according to ISO 3166-1
  dateFormat: String! #according to ISO 8601
  language: String!
  country: String!
  charset: CharsetType! #default utf-8
  measurement: MeasurementType!
  timeZone: String!
  decimalSign: String!
}

"""
Result of a mutation which deletes objects
"""
type DeleteResult {
  success: Boolean!
  error: Error
}

"""
Paging information
"""
type Paging {
  total: Int!
  limit: Int
  page: Int
}

"""
A media object
"""
type Media {
  mediaType: MediaType!
  url: String!
  purpose: MediaPurpose
}

"""
Meta data for SEO
"""
type Meta {
  description: String!
  title: String!
  robots: String
}

"""
A warehouse
"""
type Warehouse {
  id: ID!
  name: String!
  openingTimes: [DateTime!]!
  closingTimes: [DateTime!]
}

"""
Opening/closing times of a warehouse/store
When no explicit date is specified dayOfWeek needs to be specified
"""
type DateTime {
  dayOfWeek: Int
  from: String!
  until: String!
  date: String
}

"""
Tells how many items of an article are available. Refers to the BaseUnit of the article.
"""
type Availability {
  value: Int!
  warehouseId: ID!
  warehouse: Warehouse
}

"""
Users can apply coupons to a cart
"""
type Coupon {
  key: String!
  label: String
  value: Int!
}

"""
Discounts can be applied by the system to either CartItems or the Cart as a whole
"""
type Discount {
  id: ID!
  label: String
  value: Int!
}

"""
An actual tax value, referring to a TaxClass
"""
type TaxValue {
  value: Int!
  taxClass: TaxClass!
}

"""
An expense to an order/cart
"""
type Expense {
  id: ID!
  label: String
  value: Int!
}

"""
Total amounts of a Cart or a CartItem
"""
type Totals {
  net: Int!
  gross: Int!
  taxes: [TaxValue]!
  discounts: [Discount!]
  expenses: [Expense!]
}

"""
An instance of a shopping cart
"""
type Cart {
  id: ID!
  createdAt: String
  items: [CartItem!]!
  coupons: [Coupon!]!
  totals: Totals!
}

"""
A cart line item
"""
type CartItem {
  id: ID!
  cartId: ID!
  createdAt: String
  articleId: ID!
  article: Article
  parentItemId: ID
  parent: CartItem
  quantity: Int!
  salesUnit: SalesUnit!
  children: [CartItem!]!
  totals: Totals!
}

"""
Result of a carts query
"""
type CartsResult implements PagedResult {
  paging: Paging!
  results: [Cart!]!
}

"""
The product catalog consists of products. Products are made up of one or many articles. Products by their own are not buyable.
"""
type Product {
  id: ID!
  title: String!
  articleIds: [String!]!
  categoryIds: [ID!]!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  description: String!
  brandId: ID!
  brand: Brand
  labels: [String!]!
  """
  These are the attributes which make up variants. Each article must have these attributes defined.
  """
  variantAttributes: [AttributeDefinition!]!
  attributes: [Attribute]!
  createdAt: String
  updatedAt: String
  slug: String!
  status: ProductStatus!
  articles: [Article!]
  categories(customQueryConditions: [CustomQueryConditionInput!]): [Category!]
  relatedProducts(
    type: RelatedProductType
    paging: PagingInput
    customQueryConditions: [CustomQueryConditionInput!]
  ): RelatedProductsResult
  vendorId: ID!
  vendor: Vendor
}

"""
Vendors sell products. In most cases there is only one vendor in the system, but there may be many for marketplaces
"""
type Vendor {
  id: ID!
  name: String!
}

"""
Result of a vendors query
"""
type VendorsResult implements PagedResult {
  paging: Paging!
  results: [Vendor!]!
}

"""
A product which related to an other product
"""
type RelatedProduct {
  type: RelatedProductType!
  product: Product!
}

"""
Definition of a product attribute
"""
type AttributeDefinition {
  id: ID!
  label: String
  attributeType: AttributeType!
}

"""
A concrete product attribute (value)
"""
type Attribute {
  definition: AttributeDefinition!
  value: String!
}

"""
Article options may have constraints, like "at most 10 characters are allowed for this text field"
"""
type ArticleOptionConstraint {
  operator: ArticleOptionConstraintOperator!
  """
  A reference to the field which shall be compared
  """
  reference: String!
  """
  The value to which the referenced field shall be compared
  """
  comparisonValue: String!
}

"""
Options to be set before adding an article to the cart. This may include gift wrapping or customizations like engraving
"""
type ArticleOption {
  id: ID!
  label: String!
  optionType: ArticleOptionType!
  constraints: [ArticleOptionConstraint!]!
  mandatory: Boolean!
  price: Price
}

"""
An article is a concrete shape of a product
"""
type Article {
  id: ID!
  sku: String!
  title: String!
  productId: ID!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  description: String
  brandId: ID!
  brand: Brand
  isBuyable: Boolean!
  isMaster: Boolean!
  labels: [String!]!
  attributes: [Attribute!]!
  prices(quantity: Int): [Price!]!
  taxClass: TaxClass!
  availabilities(warehouseId: ID): [Availability!]!
  status: ArticleStatus!
  product: Product
  salesUnits: [SalesUnit!]!
  baseUnit: BaseUnit!
  options: [ArticleOption!]!
}

"""
Value of a product list filter
"""
type ProductListFilterValue {
  type: String!
  value: AttributeType!
  applied: Boolean!
  count: Int!
}

"""
Product list filter
"""
type ProductListFilter {
  id: ID!
  label: String
  type: AttributeType!
  values: [ProductListFilterValue!]!
}

"""
Value of an article list filter
"""
type ArticleListFilterValue {
  type: AttributeType!
  value: String!
  applied: Boolean!
  count: Int!
}

"""
Article list filter
"""
type ArticleListFilter {
  id: ID!
  label: String
  type: AttributeType!
  values: [ArticleListFilterValue!]!
}

"""
Sorting option
"""
type Sorting {
  id: String!
  label: String!
  applied: Boolean!
  value: String
}

"""
Categories are hierarchical containers for products
"""
type Category {
  id: ID!
  title: String!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  description: String
  childrenIds: [String]!
  parentId: ID
  slug: String!
  products(
    query: String
    filters: [ProductsSearchFiltersInput!]
    sort: [SortInput!]
    paging: PagingInput
    customQueryConditions: [CustomQueryConditionInput!]
  ): ProductsResult
  parent: Category
  children(
    customQueryConditions: [CustomQueryConditionInput!]
  ): CategoriesResult
}

"""
Brand
"""
type Brand {
  id: ID!
  title: String!
  media(purpose: MediaPurpose, mediaType: MediaType): [Media!]!
  slug: String!
  description: String!
  categoryIds: [String!]!
  categories(
    customQueryConditions: [CustomQueryConditionInput!]
  ): CategoriesResult
  products(
    query: String
    filters: [ProductsSearchFiltersInput!]
    sort: [SortInput!]
    paging: PagingInput
    customQueryConditions: [CustomQueryConditionInput!]
  ): ProductsResult
}

"""
Search Suggestion
"""
type Suggestion {
  type: SuggestionType!
  resultId: ID!
  title: String!
  slug: String
}

"""
Paged result of a product list
"""
type ProductsResult implements PagedResult {
  paging: Paging!
  results: [Product!]!
  filters: [ProductListFilter!]!
  sortings: [Sorting!]!
}

"""
Paged result of a related-product list
"""
type RelatedProductsResult implements PagedResult {
  paging: Paging!
  results: [RelatedProduct!]!
}

"""
Paged result of a category list
"""
type CategoriesResult implements PagedResult {
  paging: Paging!
  results: [Category!]!
}

"""
Paged result of a brand list
"""
type BrandsResult implements PagedResult {
  paging: Paging!
  results: [Brand!]!
}

"""
Payment method
"""
type PaymentMethod {
  id: ID!
  method: String!
  expense: Expense
  isActive: Boolean!
}

"""
Container for payment information
"""
type PaymentInfo {
  method: PaymentMethod
}

"""
Checkout state
"""
type CheckoutState {
  id: ID!
  payment: PaymentInfo
  shippingAddress: Address
  billingAddress: Address
  shipmentMethod: ShipmentMethod
}

interface AddressFields {
  name: String!
  street: String!
  zipCode: String!
  city: String!
  country: String!
}

"""
An address
"""
type Address implements AddressFields {
  name: String!
  name2: String
  name3: String
  company: String
  street: String!
  zipCode: String!
  city: String!
  country: String!
}

"""
A saved address of a customer
"""
type CustomerAddress implements AddressFields {
  id: ID!
  name: String!
  street: String!
  zipCode: String!
  city: String!
  country: String!
}

"""
Order
"""
type Order {
  id: ID!
  createdAt: String!
  items: [OrderItem!]
  billingAddress: Address!
  shippingAddress: Address!
  payment: PaymentInfo!
  shipments: [Shipment!]
}

type ShipmentMethod {
  id: ID!
  label: String!
  expense: Expense
  isActive: Boolean!
}

type Shipment {
  articles: [QuantifiedArticle!]
  method: String!
  tracking: Tracking
}

type Tracking {
  label: String!
  value: String!
  type: TrackingType
}

"""
Order item
"""
type OrderItem {
  id: ID!
  sku: ID!
  article: Article
  quantity: Int!
  price: Int!
  orderId: ID!
  state: String
}

"""
Paged result of an order list
"""
type OrdersResult implements PagedResult {
  paging: Paging!
  results: [Order!]
}

"""
Paged result of an ordered shipment method list
"""
type ShipmentMethodsResult implements PagedResult {
  paging: Paging!
  results: [ShipmentMethod!]!
}

"""
Paged result of an ordered payment method list
"""
type PaymentMethodsResult implements PagedResult {
  paging: Paging!
  results: [PaymentMethod!]!
}

"""
Currency
"""
type Currency {
  name: String!
  symbol: String!
  minorUnit: Int! #default 2, but there  are currencies with 3-4 decimal parts
}

"""
Tax class
"""
type TaxClass {
  id: ID!
  name: String!
  "Fractional value in percent applied to the net amount, e.g. 19"
  value: Int!
  locale: Locale!
}

"""
A sales unit is the unit in which an article is sold. Every article has to have at least SalesUnit, usually "piece"
"""
type SalesUnit {
  id: ID!
  name: MeasurementUnitType
  "Factor which defines how to convert its BaseUnit to this SalesUnit"
  conversion: Int!
}

"""
The base unit is used for all internal calculations
"""
type BaseUnit {
  id: ID!
  name: String!
  minQuantity: Int
  maxQuantity: Int
  standardQuantity: Int
  interval: Int
}

"""
A reference price provides a baseline with which prices of different articles can be compared, even though these
articles might be sold in different SalesUnits.
"""
type ReferencePrice {
  quantity: Int!
  netValue: Int!
  grossValue: Int!
  salesUnit: SalesUnit!
  taxValue: TaxValue!
  currency: Currency!
}

"""
Prices (and their related quantities) always refer to the BaseUnit of an article
"""
type Price {
  currency: Currency!
  quantity: Int!
  netValue: Int!
  grossValue: Int!
  taxValue: TaxValue!
  validFrom: String
  validUntil: String
  original: Int
  discount: Int
  referencePrice: ReferencePrice
}

"""
Wishlist
"""
type Wishlist {
  id: ID!
  name: String!
  items(customQueryConditions: [CustomQueryConditionInput!]): [WishlistItem!]!
}

"""
Wishlist item
"""
type WishlistItem {
  id: ID!
  articleId: ID!
  article: QuantifiedArticle
}

"""
Paged result of a wishlist list
"""
type WishlistsResult implements PagedResult {
  paging: Paging!
  results: [Wishlist!]
}

"""
Saved Customer
"""
type Customer {
  id: ID!
  customerNumber: String!
  firstname: String
  lastname: String
  blocked: Boolean!
  email: String!
  addresses: [CustomerAddress!]!
  defaultBillingAddress: CustomerAddress
  defaultShippingAddress: CustomerAddress
}

"""
Result of adding one or many articles to the cart
"""
type AddToCartResult {
  errors: [Error!]!
  items: [CartItem!]!
}

union PageReference = Product | Article | Brand | Category

"""
A page represents a page in the storefront, typically provided by a CMS
"""
type Page {
  id: ID!
  title: String!
  meta: Meta!
  url: String!
  status: PageStatus!
  blocks: [PageBlock!]!
  language: String
  createdAt: String
  updatedAt: String
  children: [Page!]!
  template: String
  referenceId: ID
  reference: PageReference
}

"""
A page can have multiple blocks, each of a specific type, which are optionally placed into slots
"""
type PageBlock {
  id: ID!
  blockType: String!
  data: ScalarMap!
  status: PageBlockStatus!
  slot: String
  createdAt: String
  updatedAt: String
  """
  Page blocks have a specific order within a page. The order field can be null if the page block is global (i.e. not associated with a page)
  """
  order: Int
}

"""
Result of a pages query
"""
type PagesResult implements PagedResult {
  paging: Paging!
  results: [Page!]!
}

"""
A reservation of articles in specified quantites in a warehouse
"""
type Reservation {
  id: ID!
  reservationNumber: String!
  status: ReservationStatus!
  customerId: ID
  customer: Customer
  email: String!
  phone: String
  firstname: String!
  lastname: String!
  warehouseId: ID!
  warehouse: Warehouse
  validUntil: String!
  articles: [QuantifiedArticle!]!
}

"""
A quantified article extends an article with quantity information
"""
type QuantifiedArticle {
  id: ID!
  articleID: ID!
  article: Article
  quantity: Int!
}

"""
Result of a reservations query
"""
type ReservationsResult implements PagedResult {
  paging: Paging!
  results: [Reservation!]!
}

"""
Result of a warehouses query
"""
type WarehousesResult implements PagedResult {
  paging: Paging!
  results: [Warehouse!]!
}

####################################################################################
# Inputs
####################################################################################

"""
Sort specifier
"""
input SortInput {
  field: String!
  value: SortValue!
}

"""
Paging specifier
"""
input PagingInput {
  limit: Int!
  page: Int!
}

"""
Custom cart item data
"""
input CartItemCustomDataInput {
  positionText: String
}

"""
Update cart item data
"""
input UpdateCartItemInput {
  quantity: Int
  salesUnitId: ID
  customData: CartItemCustomDataInput
}

"""
One item to be added to the cart
"""
input AddToCartItemInput {
  sku: ID!
  quantity: Int!
  salesUnitId: ID
  parentCartItemId: ID
  customData: CartItemCustomDataInput
}

"""
Product list search filters
"""
input ProductsSearchFiltersInput {
  id: ID!
  values: [String!]!
}

"""
Address data
"""
input AddressInput {
  name: String!
  name2: String
  name3: String
  company: String
  street: String!
  zipCode: String!
  city: String!
  country: String!
}

"""
Checkout data to be updated
"""
input UpdateCheckoutInput {
  email: String
  billingAddress: AddressInput
  shippingAddress: AddressInput
  shipmentMethodId: ID
  paymentMethodId: ID
}

"""
Customer data for registration
"""
input RegistrationInput {
  email: String!
  firstname: String
  lastname: String
  password: String
  addresses: [AddressInput!]!
  salutation: String
}

"""
Customer data to be updated
"""
input UpdateCustomerInput {
  email: String
  firstname: String
  lastname: String
  defaultBillingAddressId: ID
  defaultShippingAddressId: ID
}

"""
Custom query condition applied to filterable list queries
"""
input CustomQueryConditionInput {
  field: String!
  operator: String!
  value: String!
}

"""
Contact data required to create a reservation
"""
input ReservationContactDataInput {
  email: String!
  firstname: String!
  lastname: String!
  phone: String
}

"""
Data required to create a new reservation
"""
input ReservationInput {
  articleId: ID!
  quantity: Int!
  contactData: ReservationContactDataInput!
}

"""
Fields to narrow down search results for warehouses around a location
"""
input AroundLocationInput {
  searchQuery: String
  longitude: Float
  latitude: Float
}

####################################################################################
# Root
####################################################################################

type Query {
  shop: Shop

  products(
    query: String
    filters: [ProductsSearchFiltersInput!]
    sort: [SortInput!]
    paging: PagingInput
    customQueryConditions: [CustomQueryConditionInput!]
  ): ProductsResult
  product(id: ID!): Product
  productByField(field: String!, value: String!): Product

  article(id: ID!): Article
  articleByField(field: String!, value: String!): Article

  brands(
    paging: PagingInput
    customQueryConditions: [CustomQueryConditionInput!]
  ): BrandsResult
  brand(id: ID!): Brand
  brandByField(field: String!, value: String!): Brand

  categories(
    customQueryConditions: [CustomQueryConditionInput!]
  ): CategoriesResult
  category(id: ID!): Category
  categoryByField(field: String!, value: String!): Category

  suggestions(
    searchTerm: String
    customQueryConditions: [CustomQueryConditionInput!]
  ): [Suggestion!]!

  carts(customQueryConditions: [CustomQueryConditionInput!]): CartsResult
  cart(id: ID!): Cart

  wishlists(
    sort: [SortInput!]
    customQueryConditions: [CustomQueryConditionInput!]
  ): WishlistsResult
  wishlist(id: ID!): Wishlist

  orders(
    paging: PagingInput
    sort: [SortInput!]
    customQueryConditions: [CustomQueryConditionInput!]
  ): OrdersResult
  order(id: ID!): Order

  paymentMethods(
    paging: PagingInput
    sort: [SortInput]!
    cartId: ID
    customerId: ID
    addressId: ID
    customQueryConditions: [CustomQueryConditionInput!]
  ): PaymentMethodsResult

  shipmentMethods(
    paging: PagingInput
    sort: [SortInput]!
    cartId: ID
    customerId: ID
    addressId: ID
    customQueryConditions: [CustomQueryConditionInput!]
  ): ShipmentMethodsResult

  customer: Customer

  pages(
    paging: PagingInput
    sort: [SortInput!]
    status: [PageStatus!]
    customQueryConditions: [CustomQueryConditionInput!]
  ): PagesResult
  page(id: ID!): Page
  pageByField(field: String!, value: String!): Page

  warehouses(
    aroundLocation: AroundLocationInput
    customQueryConditions: [CustomQueryConditionInput!]
  ): WarehousesResult
  warehouse(id: ID!): Warehouse
  warehouseByField(field: String!, value: String!): Warehouse

  reservations(
    customQueryConditions: [CustomQueryConditionInput!]
  ): ReservationsResult
  reservation(id: ID!): Reservation
  reservationByField(field: String!, value: String!): Reservation

  vendors(customQueryConditions: [CustomQueryConditionInput!]): VendorsResult
  vendor(id: ID!): Vendor
  vendorByField(field: String!, value: String!): Vendor
}

type Mutation {
  createCart: Cart
  deleteCart(id: ID!): DeleteResult
  addToCart(cartId: ID!, items: [AddToCartItemInput!]!): AddToCartResult
  updateCartItem(id: ID!, data: UpdateCartItemInput): CartItem
  removeFromCart(cartItemId: ID!): DeleteResult
  applyCoupon(cartId: ID!, coupon: String!): Cart

  createWishlist: Wishlist
  deleteWishlist: DeleteResult
  addToWishlist(wishlistId: ID!): Wishlist
  removeFromWishlist(wishlistItemId: ID!): DeleteResult

  startCheckout(cartId: ID!, data: UpdateCheckoutInput!): CheckoutState
  updateCheckout(cartId: ID!, data: UpdateCheckoutInput!): CheckoutState
  finishCheckout(cartId: ID!): Order

  register(data: RegistrationInput!): Customer
  updateCustomer(id: ID!, data: UpdateCustomerInput!): Customer

  createReservation(
    articleId: ID!
    quantity: Int!
    reservationData: ReservationInput!
  ): Reservation
  cancelReservation(reservationId: ID!): DeleteResult
}
